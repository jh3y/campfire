@import "npm:open-props/open-props.min.css";
@import "npm:open-props/normalize.min.css";

@property --spin {
	initial-value: 0deg;
	syntax: '<angle>';
	inherits: true;
}

:root {
  --hue: 160;
  --size: 50;
  --record-shine: rgba(255,255,255,0.45);
  --record-body: #262626;
  --player-base: #595959;
  --player-shine: #4d4d4d;
  --record-base: #0d0d0d;
  --stroke: #0d0d0d;
  --pupil: #fff;
  --tongue: #f00;
  --record-label-base: #fafafa;
  --record-label: hsl(10 50% 66%);
  --knob-base: #b3b3b3;
  --knob-top: #262626;
  --player-accent: #f00;
  --needle: #1a1a1a;
  --counter: #666;
  --arm-top: #666;
}


* {
  box-sizing: border-box;
  transform-style: preserve-3d;
}

body {
  display: grid;
  place-items: center;
  min-height: 100vh;
  margin: 0;
  background: var(--gradient-23);
  overflow: hidden;
  font-family: 'Google Sans', sans-serif;
}

.controls {
	transform-style: flat;
}

.intro {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	gap: 1rem;
	animation: drop 0.5s forwards ease-in;
	text-align: center;
	background: var(--gray-9);
	display: grid;
	padding: var(--size-6);
}

.intro-container {
	position: fixed;
	inset: 0;
}

@keyframes drop {
	from {
		transform: translate(-50%, calc(-50% - 100vh));
	}
}

.intro-container:before {
	content: "";
	position: fixed;
	width: 100vw;
	height: 100vh;
	top: 50%;
	left: 50%;
	z-index: -1;
	transform: translate(-50%, -50%);
	background: hsl(0 0% 10% / 0.4);
	backdrop-filter: blur(14px);
}

.box {
	position: absolute;
	top: 50%;
	left: 50%;
	height: 25vmin;
	aspect-ratio: 1;
	transform: translate(-50%, -50%);
	background: var(--gradient-11);
	border-radius: 50%;
}

.deck {
	--depth: 60vmin;
	position: absolute;
	top: 50%;
	left: 50%;
	height: 10vmin;
	aspect-ratio: 6 / 1;
	transform: translate3d(-50%, -50%, 100vmin) rotateX(-24deg) rotateY(-32deg);
	color: hsl(0 0% 15%);
}


.deck__record {
	height: 100%;
	width: 100%;
	transform: translate3d(0, 0, -1vmin);
}


.audio-toggle {
	--muted: 0;
	color: var(--gray-0);
	padding: 0;
	height: 48px;
	aspect-ratio: 1;
	position: fixed;
	bottom: 2rem;
	right: 2rem;
	transform-style: flat;
	transition: transform 0.2s, background 0.2s;
	background: var(--bg, var(--gray-7));
	transform: scale(var(--scale, 1)) translateY(var(--y));
}

.audio-toggle:hover {
	--bg: var(--gray-5);
	--scale: 1.1;
	--y: -5%;
}

.audio-toggle:active {
	--bg: var(--gray-9);
	--scale: 0.9;
	--y: 5%;
}

.audio-toggle svg {
	fill: var(--color, var(--gray-0));
	opacity: var(--muted);
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	stroke: none;
}

.audio-toggle svg:nth-of-type(1) {
	opacity: calc(1 - var(--muted));
}

.audio-toggle[aria-pressed="true"] {
	--muted: 1;
	--color: var(--red-7);
}



.cuboid {
  height: 100%;
  width: 100%;
  position: relative;
}

.cuboid__side {
  background-color: currentColor;
  position: absolute;
  height: 100%;
  width: 100%;
  transition: background-color 0.2s;
  filter: brightness(var(--brightness, 1));
  border-bottom: calc(var(--depth) * 0.1) solid hsl(var(--side-color) / 0.25);
}

/* T, R, B, L, F, B */
.cuboid__side:nth-of-type(1) {
  --brightness: 0.8;
  filter: none;
  top: 0;
  height: var(--depth, 50vmin);
  transform: translateY(-50%) rotateX(-90deg);
}

.cuboid__side:nth-of-type(1):before {
	content: "";
	position: absolute;
	inset: 0;
	filter: brightness(var(--brightness));
	background: currentColor;
}

.cuboid__side:nth-of-type(1) svg {
	filter: brightness(var(--brightness));
}

.cuboid__side:nth-of-type(2) {
  --brightness: 0.6;
  top: 50%;
  right: 0;
  width: var(--depth, 50vmin);
  transform: translate(50%, -50%) rotateY(-90deg);
}
.cuboid__side:nth-of-type(3) {
  --brightness: 1.3;
  bottom: 0;
  height: var(--depth, 50vmin);
  transform: translateY(50%) rotateX(90deg);
}
.cuboid__side:nth-of-type(4) {
  --brightness: 0.6;
  top: 50%;
  width: var(--depth, 50vmin);
  transform: translate(-50%, -50%) rotateY(90deg);
}
.cuboid__side:nth-of-type(5) {
  --brightness: 0.75;
  transform: translateZ(calc(var(--depth, 50vmin) / -2));
}
.cuboid__side:nth-of-type(6) {
  --brightness: 1;
  transform: translateZ(calc(var(--depth, 50vmin) / 2)) rotateY(180deg);
}




/* Imported stuff */

.record-player {
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(180deg);
}
.frame__shine {
  fill: var(--player-shine);
}
.frame__base {
  fill: var(--player-base);
}
.record-base {
  fill: var(--record-base);
}
.record__body {
  fill: var(--record-body);
}
.record__shine {
  stroke: var(--record-shine);
}
.pupil {
  fill: var(--pupil);
}
.eye {
  fill: var(--stroke);
}
.mouth__opening {
  fill: var(--stroke);
}
.mouth__tongue {
  fill: var(--tongue);
}
.face--nauseous {
  display: none;
}
.face--nauseous path {
  stroke: var(--stroke);
}
.face--nauseous circle {
  fill: var(--stroke);
}
.record__label-base {
  fill: var(--record-label-base);
}
.record__label {
  fill: var(--record-label);
  transition: fill 0.25s ease;
}
.knob__shine {
  fill: var(--record-shine);
}
.knob__top {
  fill: var(--knob-top);
}
.knob__base {
  fill: var(--knob-base);
}
.knob__indicator {
  fill: var(--player-accent);
}
.player-arm__needle {
  fill: var(--needle);
}
.player-arm__counter {
  fill: var(--counter);
}
.player-arm__top {
  fill: var(--arm-top);
}
.volume__levels {
  stroke: var(--stroke);
  stroke-width: 1;
}
.volume__base {
  fill: var(--stroke);
  stroke: var(--knob-base);
}
.volume__slider {
  fill: var(--knob-base);
}
.volume__indicator {
  fill: var(--player-accent);
  stroke: var(--player-accent);
}
.branding rect {
  fill: var(--player-accent);
}
.branding path {
  fill: var(--pupil);
}