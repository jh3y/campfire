@import "npm:open-props/open-props.min.css";
@import "npm:open-props/normalize.min.css";

* {
  box-sizing: border-box;
}

:root {
  --recording: 0;
  --bg: hsl(var(--hue, 0) calc(var(--saturation, 0) * 1%) calc(var(--lightness, 0) * 1%));
  --adaptive: hsl(0 0% calc((100 - var(--lightness)) * 1%));
}

.lights-on {
  --lightness: 98;
}

.lights-off {
  --lightness: 2;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;  
}

body {
  background: var(--bg);
  display: grid;
  place-items: center;
  min-height: 100vh;
  transition: background 0.5s, color 0.5s;
}

main {
  max-inline-size: var(--size-content-1);
  font-family: 'Google Sans', sans-serif;
  font-size: var(--font-size-fluid-1);
  color: var(--text, var(--gray-0));
}

[aria-pressed] {
  height: 48px;
  aspect-ratio: 1;
}

.controls {
  display: flex;
  position: fixed;
  top: 2vmin;
  left: 2vmin;
  gap: 1vmin;
}

[aria-pressed] svg {
  display: none;
  fill: black;
  height: 80%;
}

:is([aria-pressed="false"] svg:first-of-type, [aria-pressed="true"] svg:last-of-type) {
  display: block;
}

.recording-status {
  height: 5vmin;
  aspect-ratio: 1;
  position: fixed;
  top: 2vmin;
  right: 2vmin;
  background: hsl(10 80% 50%);
  border-radius: 50%;
  animation: pulse calc(var(--recording, 0) * 1s) infinite ease-in-out;
}

@keyframes pulse {
  0%, 100% {
    opacity: 0;
  }
  50% {
    opacity: var(--recording, 0);
  }
}

.instruction {
  opacity: 0.6;
}